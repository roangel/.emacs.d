#include "myGraphicsRectItem.h"

#include <QGraphicsSceneMouseEvent>
#include <QRect>
#include <QGraphicsRectItem>

myGraphicsRectItem::myGraphicsRectItem(QObject *parent)
    : QGraphicsScene(parent)
{
    pen = new QPen(Qt::black);
    brush = new QBrush(Qt::blue);

    tmp_rect = 0;
    startedRect = false;
    // firstClick = true;
}


void myGraphicsRectItem::mousePressEvent(QGraphicsSceneMouseEvent *mouseEvent)
{
    if (mouseEvent->button() != Qt::LeftButton)
        return;


    // Drag and drop approach

    startedRect = true;
    p1 = new QPointF(mouseEvent->scenePos());
    tmp_rect = new QRectF(*p1, *p1);
    tmp_rect_item = new QGraphicsRectItem(*tmp_rect);
    addItem(tmp_rect_item);
    update();
    QGraphicsScene::mousePressEvent(mouseEvent);
}

void myGraphicsRectItem::mouseMoveEvent(QGraphicsSceneMouseEvent *mouseEvent)
{
    if(startedRect)
    {
        tmp_rect_item->setRect(QRectF(*p1, mouseEvent->scenePos()));
        update();
        qDebug("Mouse Position: %d, %d", (mouseEvent->scenePos()).toPoint().x(), (mouseEvent->scenePos()).toPoint().y());
        qDebug("Rectangle BottomRight Position: %d, %d", tmp_rect->bottomRight().x(), tmp_rect->bottomRight().y());
    }
    QGraphicsScene::mouseMoveEvent(mouseEvent);
}

void myGraphicsRectItem::mouseReleaseEvent(QGraphicsSceneMouseEvent *mouseEvent)
{

    if (mouseEvent->button() != Qt::LeftButton)
        return;

    // Drag and drop approach:

    // TODO: If too small, etc etc, dont add it to the container and remove it

    rectangles.push_back(tmp_rect_item);

    tmp_rect = 0;
    startedRect = false;

    update();
    QGraphicsScene::mouseReleaseEvent(mouseEvent);
}
