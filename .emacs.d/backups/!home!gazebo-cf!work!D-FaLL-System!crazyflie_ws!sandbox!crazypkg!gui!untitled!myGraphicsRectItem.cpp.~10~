#include "myGraphicsRectItem.h"

#include <QGraphicsSceneMouseEvent>
#include <QGraphicsRectItem>
#include <QPen>
#include <QBrush>
#include <QApplication>
#include <QVariant>

myGraphicsRectItem::myGraphicsRectItem(const QRectF & rect, QGraphicsItem * parent)
    : QGraphicsRectItem(rect, parent)
{
    this->setFlag(QGraphicsItem::ItemIsSelectable);
    this->setFlag(QGraphicsItem::ItemIsMovable);
    pen = new QPen(Qt::red);
    brush = new QBrush(Qt::red);

    tmp_rect = 0;
    // firstClick = true;
    // this->setAcceptHoverEvents(true);
}


QVariant myGraphicsRectItem::itemChange(GraphicsItemChange change, const QVariant &value)
{
    if (change == QGraphicsItem::ItemSelectedChange)
    {
        if (value == true)
        {
            qDebug("selected!");

            _bottomLeft_corner = new CornerGrabber(this, CornerGrabber::bottomLeft);
            _topLeft_corner = new CornerGrabber(this, CornerGrabber::topLeft);
            _topRight_corner = new CornerGrabber(this, CornerGrabber::topRight);
            _bottomRight_corner = new CornerGrabber(this, CornerGrabber::topRight);


            _bottomLeft_corner->installSceneEventFilter(this);
            _topLeft_corner->installSceneEventFilter(this);
            _topRight_corner->installSceneEventFilter(this);
            _bottomRight_corner->installSceneEventFilter(this);

            setCornerPositions();

        }
        else
        {
            qDebug("unselected!");
            _bottomLeft_corner->setParentItem(NULL);
            _topLeft_corner->setParentItem(NULL);
            _topRight_corner->setParentItem(NULL);
            _bottomRight_corner->setParentItem(NULL);

            delete _bottomLeft_corner;
            delete _topLeft_corner;
            delete _topRight_corner;
            delete _bottomRight_corner;
        }
    }

    return QGraphicsItem::itemChange(change, value);
}

void myGraphicsRectItem::setCornerPositions()
{
    QRectF rect = this->rect();

    _bottomLeft_corner->setPos(rect.bottomLeft().x(), rect.bottomLeft().y() - _bottomLeft_corner->getHeight());
    _topLeft_corner->setPos(rect.topLeft().x(), rect.topLeft().y());
    _topRight_corner->setPos(rect.topRight().x() - _topRight_corner->getWidth(), rect.topRight().y());
    _bottomRight_corner->setPos(rect.bottomRight().x() - _bottomRight_corner->getWidth(), rect.bottomRight().y() - _bottomRight_corner->getHeight());
}


void myGraphicsRectItem::mousePressEvent(QGraphicsSceneMouseEvent *mouseEvent)
{
    if (mouseEvent->button() != Qt::LeftButton)
        return;
    // TODO: check if over handlers, if, resize mode
    QGraphicsRectItem::mousePressEvent(mouseEvent);
}

void myGraphicsRectItem::mouseMoveEvent(QGraphicsSceneMouseEvent *mouseEvent)
{
    this->prepareGeometryChange();
    QGraphicsRectItem::mouseMoveEvent(mouseEvent);
}

void myGraphicsRectItem::mouseReleaseEvent(QGraphicsSceneMouseEvent *mouseEvent)
{

    if (mouseEvent->button() != Qt::LeftButton)
        return;
    // TODO: stop resize mode
    QGraphicsRectItem::mouseReleaseEvent(mouseEvent);
}
